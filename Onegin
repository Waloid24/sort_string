#include <stdio.h>
#include <stdlib.h>
#include <string.h>

size_t my_getline (char** dest_adr, int * size, FILE * stream);
void sort_strings (char * mass_of_pointer_to_strings[], int counter);

const int STANDART_SIZE = 10;

int main (void)
{
	char ** mass = nullptr;
	int n = 0;
	int size_of_line = 0; //чтобы getline выделил место
	int num_of_strings = 0;
	
	int ch = 0; // переменная нужна только для проверки места, на котором сейчас стоит указатель в файле.
	
	FILE * ptr_file = fopen ("Hamlet.txt", "r"); //открыли файл только для чтения
	
	printf ("ptr_file = %p\n", ptr_file);
	
	while (feof(ptr_file) == 0)
	{
		if ((ch = fgetc(ptr_file)) == '\n')
			n++;
	} //после выхода из цикла указатель стоит на конце файла
	n++;
	printf("n = %d\n", n);
	
	if (n == 0)
	{
		printf("Reading file error.\n");
		return -1;
	}
	
	printf("File reading ACCESS\n");
	printf ("Position in file before fseek = %p\n", ch);
	
	mass = (char **) calloc(n, sizeof (char *));  //переменная типа указателя на указатели, которые лежат в массиве, каждая ячеййка которого имеет размер типа указтеля на char
	
	fseek (ptr_file, 0L, SEEK_SET); //передвинули указатель в начало файла
	
	while (feof(ptr_file) == 0)  //нужно установить указатели на строки 
	{
		printf("in ptr to string\n");
		printf("size = %d\n", size_of_line);
		my_getline (mass, &size_of_line, ptr_file);
		printf("size = %d\n", size_of_line);
		num_of_strings++;
		*mass++;  // передвигаем указатель в массиве указателей на строки
	}
	
	sort_strings (mass, num_of_strings);
	
	puts ("\nSort in alphabetical order:\n");
	while (num_of_strings > 0)
	{
		//printf("meow\n");
		puts(*mass);
		*mass++;
		num_of_strings--;
	}
	
	return 0;	
}

size_t my_getline (char** dest_adr, int * size, FILE * stream)
{
	if (*dest_adr == NULL)
	{
		printf("*dest_adr = %p\n", *dest_adr);
		*dest_adr = (char *) calloc (STANDART_SIZE, sizeof(char));
		printf("*dest_adr = %p\n", *dest_adr); //вставить выше
	}
	if (*dest_adr == NULL) //убрал это: && **dest_adr == EOF
	{
		printf("Error: *dest_adr == NULL\n");
		return (size_t)(-1);
	}
	int num_of_sym = 0;
	printf("(*dest_adr)[0] = %d", (*dest_adr[3]));
	printf("size = %d", *size);
	while (((*dest_adr)[num_of_sym] = fgetc(stream)) != EOF && (*dest_adr)[num_of_sym] != '\n')
	{
		num_of_sym++; 
		//printf("num_of_sym = %d\n", num_of_sym);
		if (num_of_sym >= *size)
		{
			*size *= 2;
			*dest_adr = (char*) realloc(*dest_adr, *size);
		}
	}
	(*dest_adr)[num_of_sym] = '\0';
	
	return num_of_sym;
}

void sort_strings (char * mass_of_pointer_to_strings[], int counter)
{
	char * temp = nullptr;
	for (int i = 0; i < counter - 1; i++)
		for (int j = i + 1; j < counter; j++)
			if (strcmp(mass_of_pointer_to_strings[i], mass_of_pointer_to_strings[j]) > 0)
			{
				temp = mass_of_pointer_to_strings[i];
				mass_of_pointer_to_strings[i] = mass_of_pointer_to_strings[j];
				mass_of_pointer_to_strings[j] = temp;
			}
}
